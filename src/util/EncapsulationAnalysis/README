AUTHOR: Ankur Taly (ataly@stanford.edu).

DESCRIPTION OF THE TOOL

Notation:
* Trusted Code: The library code that create the API functions.
* Untrusted Code: Any code that uses the API.
* Precious state: Trusted state that must not directly leak out untrusted code.

This is a tool that performs encapsulation analysis on javascript functions. In most modern mashups, components talk to each other by exposing an API to the third party.
The purpose of the API is to provide some utility to third party code without compromising any "precious state". The goal of this tool to varify the secrity properties ofthe  API.
The security property that we currently verify is that untrusted does not get direct access to precious state. 

Assumptions: We assume that untrusted code executes in ES5-strict mode with all promordials frozen. Further untrusted code cannot make use of getters/setters or eval.

Dom Model: Dom is by deafalt a precious object. We model it conservatively as a single summary object called domObj, and all dom object methods are modelled as a single summary function object called domFunctionObj. The code of domFunctionObj is to simply return domObj when invoked.


REQUIREMENTS
1) BDDBDDB package
2) NodeJS


BUILDING THE TOOL

1) Download the bddbddb jar file from http://bddbddb.sourceforge.net/bddbddb-full.jar

2) Create a folder names BddbddbAnalyzer in the current directory and mode the jar file to that folder.

3) Run the following commands:
	- cd BddbddbAnalyzer
        - jar -xf bddbddb-full.jar

4) Download NodeJS from http://nodejs.org/#download
   Follow the installation instructions.
   Make sure that the 'node' executable is added to /usr/local/bin


USAGE: 
- Input file format: The input file consists of the definitions of all the trusted functions followed by a statement 

attacker = object or an array of objects that are handed over to third party code

// "attacker" here is a specific keyword indicating  objects that are exposed to third party code.


- Command line usage: 'node v8analyzer <inputFileName> <ouputtFileName> <flags>

- Flags supported

 * -cloneNative : Clones native objects in the analysis
 * -cloneDom: Clones dom objects in the analysis
 * -cloneUserAll: Clones all user provided function objects in the analysis
 * -cloneUserReachable: Clones all function objects that are reachable to the attacker.
  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Please note that this work is still in progress. Although we have an informal soundness argument, we are still in the process of writing up a formal soundness proof. 

TODO:

1) Improve the precision by making sure that all functions called by the attacker (including those that are transitively called) are either clones or are ones that don't have any clones.

2) Work on generating counter examples from the reachability proof trace produced by datalog (Use come-from).   
