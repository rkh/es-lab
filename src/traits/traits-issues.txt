Open issues with Traits

- is 'compose' commutative? not sure because it's defined in an imperative way.
   that is, is:                   equivalent to:      ? 
     compose(x, T1, advice1);       compose(x, T2, advice2);
     compose(x, T2, advice2);       compose(x, T1, advice1);
  This is ugly because the commutativity is very implicit, and only holds when 'x'
  is not modified in between, and only holds for compose calls to the same 'x'.
  They should be thought of as 'grouped' and the composition should be thought of as atomic.
  Also, the result should still be thought of as a trait.
  Also, use(x,T1); use(x,T2); should be prohibited, instead
   'use' should compose an object with 1 single composite trait.

   compose(t,T1,adv1); compose(t,T2,adv2); use(x,t); // x << (T1 + T2)
     is not equivalent to:
   use(x,T1,adv1); use(x,T2,adv2);   // x << T1 << T2
    where O << T implies that T is mixed in with O, but if O already defines a prop in T, O's prop wins (no conflict)
    if both T1 and T2 define a property 'a', the first case will signal a conflict,
    whereas the second case will add 'T1.a' to x, and then discard T2.a as it's already present in (x << T1)

=> traits-alt proposal deals with the above issue
compose vs use is more complex than the simple addTrait
maybe we should opt for the simpler addTrait that always signals conflicts. conflicts can always be prevented using explicit excludes

- compose vs use: it would be better to discriminate between them automatically based on:
  - whether 'composite' is itself a trait or the final non-trait composite.
  - determine overriding on a per-property based on whether 'selfDesc' denotes a previously imported trait property, or a property defined by 'self' itself.
  - group trait compositions into use blocks conflicts only signalled within a use block
    // e.g. if T1, T2 both define a property named 'a', then in
    // use { T1, T2 } , 'a' would be bound to a conflict
    // but in use {T1,...} ; use {T2, ...} T1's 'a' will shadow T2's 'a'
    // in other words: trait import is commutative within use blocks, but use blocks themselves
    // are not commutative

    // T = compose(T1, T2, ..., advice); // T1 + T2 + ... -> T, with + commut. and assoc.
    // use(O, T1, T2, ..., advice); // O << (T1 + T2 + ...) -> O', with << not commut. or assoc.
    //  problem: how does the advice now relate to the individual traits?

- try a 'diamond' setup to test whether isSameDesc works.

- allowing traits to declare required methods and checking required methods at composition-time
  what about defining a special object called 'required' such that incomplete traits can write:

var EnumerableTrait = {
   each: required, // signals that 'each' is a required method
   map: function(f) { var m = []; this.each(function(e) { m.push(f(e)) }); return m; }
}
the 'compose' and 'use' functions could check whether a property has the value 'required' and treat
it specially

- explicitly raising a conflict exception at use-composition-time (not at compose-composition-time)

- operator to test whether an object 'is an instance of' a particular trait?

- preprocessing traits:
composing using Object.defineProperties instead of Object.defineProperty*
could preprocess traits to be stored as a property descriptor map instead of as an object 

using partial evaluation / static analysis it should be possible to 'compile away' object, compose, alias and exclude into an object literal (with conflicts being signalled statically)
-> would have the same performance characteristics of a class-based system with ad hoc syntax

- define a collections lib with these operators

'traits' are simply objects
4 operators:
- object: obj -> frozen obj and fixes 'this' binding
- compose: obj1 x obj2 x ... x objN -> objN+1
- alias: map<string,string> x obj -> obj
- exclude: list<string|obj> x obj -> obj
we don't need the with operator from the Traits model because we have a computed exclude.

object(obj, { extends: parent, failOnConflicts: true })
// with EphemeronTables can build branding -> { implements: [list-of-brands] }
// this would allow a test: brand.isBranded(obj)

what about branding individual traits? MarkM: would be unreliable since traits are themselves incomplete and meant to be used as reusable building blocks. Only complete objects should be branded.

{ prop: required } -> signals a required property (always overridden)